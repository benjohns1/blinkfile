name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  source:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'app/web/package.json'
      - name: Install front-end javascript utilities
        run: cd app/web && npm ci # some directories in node_modules are embedded in Go binary
      - name: Install go dependencies
        run: go mod download
      - name: Upload source and installed dependencies
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: |
            ./
            !test/
  lint:
    runs-on: ubuntu-22.04
    needs: source
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: source
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55
  unit-test:
    runs-on: ubuntu-22.04
    needs: source
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: source
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Run unit tests
        run: go test ./...
  build:
    runs-on: ubuntu-22.04
    needs: source
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: source
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Build go binary
        run: CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -o ./binary ./cmd/main.go
      - uses: docker/setup-buildx-action@v3
      - name: Build release image candidate
        uses: docker/build-push-action@v5
        with:
          context: .
          outputs: type=docker,dest=/tmp/app-candidate-image.tar
          tags: app-candidate
      - name: Upload app image candidate artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-candidate-image
          path: /tmp/app-candidate-image.tar
          compression-level: 0
  acceptance-test-source:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Upload source and installed dependencies
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-source
          path: test/
  acceptance-test-runner-build:
    runs-on: ubuntu-22.04
    needs: acceptance-test-source
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: acceptance-test-source
      - uses: docker/setup-buildx-action@v3
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build acceptance-test runner image
        uses: docker/build-push-action@v5
        with:
          context: ./test/cypress
          push: true
          tags: benjohns1/acceptance-test-runner:latest
          cache-from: type=gha
          cache-to: type=gha
  acceptance-test:
    runs-on: ubuntu-22.04
    needs: [build,acceptance-test-runner-build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-candidate-image
          path: /tmp
      - name: Load app image candidate
        run: docker load --input /tmp/app-candidate-image.tar
      - uses: actions/download-artifact@v4
        with:
          name: acceptance-test-source
      - name: Run acceptance tests
        run: cd test && docker compose up --exit-code-from acceptance-test-runner
  deploy:
    runs-on: ubuntu-22.04
    needs: [lint,unit-test,build,acceptance-test]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp
      - name: Load release image candidate
        run: docker load --input /tmp/image.tar
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Tag & push image
        run: |
          docker tag app-candidate benjohns1/blinkfile:latest
          docker rmi app-candidate
          docker push -a
